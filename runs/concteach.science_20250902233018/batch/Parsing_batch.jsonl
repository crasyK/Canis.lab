{"custom_id": "0", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "1", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "2", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "3", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "4", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "5", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "6", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "7", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "8", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "9", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "10", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "11", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "12", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "13", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "14", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "15", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "16", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "17", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "18", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "19", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "20", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "21", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "22", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "23", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "24", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "25", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "26", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "27", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "28", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "29", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "30", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "31", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "32", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "33", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "34", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "35", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "36", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "37", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "38", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "39", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "40", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "41", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "42", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "43", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "44", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "45", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "46", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "47", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "48", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "49", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "50", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "51", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "52", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "53", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "54", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "55", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "56", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "57", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "58", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "59", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "60", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "61", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "62", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "63", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "64", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "65", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "66", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "67", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "68", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "69", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "70", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "71", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "72", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "73", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "74", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "75", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "76", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "77", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "78", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "79", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "80", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "81", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "82", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "83", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "84", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "85", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "86", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "87", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "88", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "89", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "90", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "91", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "92", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "93", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "94", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "95", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "96", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "97", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "98", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "99", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "100", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "101", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "102", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "103", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "104", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "105", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "106", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "107", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "108", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "109", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "110", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "111", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "112", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "113", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "114", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "115", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "116", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "117", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "118", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "119", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "120", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "121", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "122", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "123", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "124", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "125", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "126", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "127", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "128", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "129", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "130", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "131", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "132", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "133", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "134", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "135", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "136", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "137", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "138", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "139", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "140", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "141", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "142", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "143", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "144", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "145", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "146", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "147", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "148", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "149", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "150", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "151", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "152", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "153", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "154", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "155", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "156", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "157", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "158", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "159", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "160", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "161", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "162", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "163", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "164", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "165", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "166", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "167", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "168", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "169", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "170", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "171", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "172", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "173", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "174", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "175", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "176", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "177", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "178", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "179", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "180", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "181", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "182", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "183", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "184", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "185", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "186", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "187", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "188", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "189", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "190", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "191", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "192", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "193", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "194", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "195", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "196", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "197", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "198", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "199", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "200", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "201", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "202", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "203", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "204", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "205", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "206", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "207", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "208", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "209", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "210", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "211", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "212", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "213", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "214", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "215", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "216", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "217", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "218", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "219", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "220", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "221", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "222", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "223", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "224", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "225", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "226", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "227", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "228", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "229", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "230", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "231", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "232", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "233", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "234", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "235", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "236", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "237", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "238", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "239", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "240", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "241", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "242", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "243", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "244", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "245", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "246", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "247", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "248", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "249", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "250", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "251", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "252", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "253", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "254", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "255", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "256", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "257", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "258", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "259", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "260", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "261", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "262", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "263", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "264", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "265", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "266", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "267", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "268", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "269", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "270", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "271", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "272", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "273", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "274", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "275", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "276", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "277", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "278", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "279", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "280", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "281", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "282", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "283", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "284", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "285", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "286", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "287", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "288", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "289", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "290", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "291", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "292", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "293", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "294", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "295", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "296", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "297", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "298", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "299", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "300", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "301", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "302", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "303", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "304", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "305", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "306", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "307", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "308", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "309", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "310", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "311", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "312", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "313", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "314", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "315", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "316", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "317", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "318", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "319", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "320", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "321", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "322", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "323", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "324", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "325", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "326", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "327", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
{"custom_id": "328", "method": "POST", "url": "/v1/responses", "body": {"model": "gpt-5-nano", "input": [{"role": "system", "content": "You are parsing raw dialogues into structured JSON format with intelligent role detection.\n\nCRITICAL GROUPING RULES:\n1. Each \"Dialogue X\" or \"Conversation X\" section = ONE dialogue array\n2. ALL turns within that section go into the SAME dialogue array\n3. DO NOT create separate dialogue arrays for each Q&A pair\n4. Only create a NEW dialogue array when you see a new section header\n\nEXAMPLE - WRONG APPROACH:\nInput: \"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1\n- Student: Question 2\n- Teacher: Answer 2\"\n\u274c WRONG: [ [Q1,A1], [Q2,A2] ]  // Each Q&A pair as separate dialogue\n\n\u2705 CORRECT: [ [Q1,A1,Q2,A2] ]  // All turns in one dialogue array\n\nPARSING INSTRUCTIONS:\n1. Identify dialogue sections by headers (\"Dialogue X\", \"Conversation X\", etc.)\n2. For each section, collect ALL speaker turns into ONE dialogue array\n3. Use smart role detection based on speaker names/titles:\n\nUSER INDICATORS (assign role \"user\"):\n- Student, Learner, Customer, Client, Caller, User, Human, Person A, Interviewee, Visitor, Guest, Member\n- Anyone asking questions or seeking help\n\nASSISTANT INDICATORS (assign role \"assistant\"):  \n- Teacher, Instructor, Agent, Support, Bot, AI, Assistant, Consultant, Representative, Advisor, Helper, Person B, Interviewer, Host, Staff\n- Anyone providing answers, help, or service\n\nCONTEXT CLUES:\n- Look at content: who's asking vs answering questions?\n- Who's seeking help vs offering help?\n- Maintain consistency within each dialogue section\n\n4. Remove speaker prefixes from content\n5. Maintain exact chronological order of all turns\n\nSTRUCTURE EXAMPLE:\nInput:\n\"Dialogue 1\n- Student: Question 1\n- Teacher: Answer 1  \n- Student: Question 2\n- Teacher: Answer 2\n\nDialogue 2\n- Customer: Issue 1\n- Agent: Response 1\"\n\nOutput:\n{\n  \"dialogue\": [\n    [\n      {\"role\": \"user\", \"content\": \"Question 1\"},\n      {\"role\": \"assistant\", \"content\": \"Answer 1\"},\n      {\"role\": \"user\", \"content\": \"Question 2\"}, \n      {\"role\": \"assistant\", \"content\": \"Answer 2\"}\n    ],\n    [\n      {\"role\": \"user\", \"content\": \"Issue 1\"},\n      {\"role\": \"assistant\", \"content\": \"Response 1\"}\n    ]\n  ]\n}"}, {"role": "user", "content": "__data__"}], "text": {"format": {"type": "json_schema", "name": "dialogues", "schema": {"type": "object", "properties": {"dialogue": {"type": "array", "description": "An array of dialogue sequences. Each dialogue is an array of turns between participants.", "items": {"type": "array", "description": "A single dialogue: ordered list of message-exchanges.", "items": {"type": "object", "description": "A single turn in the dialogue.", "properties": {"role": {"type": "string", "description": "Role of the speaker in this turn, e.g., 'assistant' or 'user'.", "enum": ["assistant", "user"]}, "content": {"type": "string", "description": "Text spoken by the participant in this turn.", "minLength": 1}}, "required": ["role", "content"], "additionalProperties": false}, "minItems": 1}, "minItems": 1}}, "required": ["dialogue"], "additionalProperties": false}, "strict": true}}}}
